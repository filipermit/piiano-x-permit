/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsProperty from '../model/ModelsProperty';
import RestHTTPError from '../model/RestHTTPError';

/**
* CollectionProperties service.
* @module api/CollectionPropertiesApi
* @version 1.0
*/
export default class CollectionPropertiesApi {

    /**
    * Constructs a new CollectionPropertiesApi. 
    * @alias module:api/CollectionPropertiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCollectionProperty operation.
     * @callback module:api/CollectionPropertiesApi~addCollectionPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add collection property
     * Adds a property to a collection.  The property name provided in the `property` parameter and request body must match. When the collection contains objects, only nullable properties can be added to the collection.  The role performing this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {String} collection The name of the collection to add the property to.
     * @param {String} property The name of the property to add.
     * @param {module:model/ModelsProperty} modelsProperty Details of the property.
     * @param {module:api/CollectionPropertiesApi~addCollectionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsProperty}
     */
    addCollectionProperty(collection, property, modelsProperty, callback) {
      let postBody = modelsProperty;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling addCollectionProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling addCollectionProperty");
      }
      // verify the required parameter 'modelsProperty' is set
      if (modelsProperty === undefined || modelsProperty === null) {
        throw new Error("Missing the required parameter 'modelsProperty' when calling addCollectionProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsProperty;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollectionProperty operation.
     * @callback module:api/CollectionPropertiesApi~deleteCollectionPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection property
     * Deletes a property from a collection.  Any values stored against the property in objects are also deleted. This operation is irreversible.  The role that performs this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {String} collection The name of the collection containing the property.
     * @param {String} property The name of the property.
     * @param {module:api/CollectionPropertiesApi~deleteCollectionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollectionProperty(collection, property, callback) {
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteCollectionProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling deleteCollectionProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollectionProperty operation.
     * @callback module:api/CollectionPropertiesApi~getCollectionPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection property
     * Gets a property of a collection.  The role that performs this operation must have the `CapCollectionsReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {String} collection The name of the collection containing the property.
     * @param {String} property The name of the property.
     * @param {module:api/CollectionPropertiesApi~getCollectionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsProperty}
     */
    getCollectionProperty(collection, property, callback) {
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling getCollectionProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling getCollectionProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsProperty;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollectionProperties operation.
     * @callback module:api/CollectionPropertiesApi~listCollectionPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsProperty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collection properties
     * Lists the properties of a collection.  The role that performs this operation must have the `CapCollectionsReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {String} collection The name of the collection containing the properties.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include:  - `show_builtins` – show built-in properties in the response. 
     * @param {module:api/CollectionPropertiesApi~listCollectionPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsProperty>}
     */
    listCollectionProperties(collection, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling listCollectionProperties");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsProperty];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollectionProperty operation.
     * @callback module:api/CollectionPropertiesApi~updateCollectionPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collection property
     * ** Not implemented **  Updates a property of a collection. Properties with values on objects in the collection cannot be updated. Any property not included in the request is replaced with its default values.  The role that performs this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {String} collection The name of the collection containing the property.
     * @param {String} property The name of the property.
     * @param {module:model/ModelsProperty} modelsProperty property info
     * @param {module:api/CollectionPropertiesApi~updateCollectionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCollectionProperty(collection, property, modelsProperty, callback) {
      let postBody = modelsProperty;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling updateCollectionProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling updateCollectionProperty");
      }
      // verify the required parameter 'modelsProperty' is set
      if (modelsProperty === undefined || modelsProperty === null) {
        throw new Error("Missing the required parameter 'modelsProperty' when calling updateCollectionProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
