/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsPIIType from '../model/ModelsPIIType';
import ModelsTransformation from '../model/ModelsTransformation';
import RestHTTPError from '../model/RestHTTPError';

/**
* DataTypesAndTransformations service.
* @module api/DataTypesAndTransformationsApi
* @version 1.0
*/
export default class DataTypesAndTransformationsApi {

    /**
    * Constructs a new DataTypesAndTransformationsApi. 
    * @alias module:api/DataTypesAndTransformationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listPropertyTypes operation.
     * @callback module:api/DataTypesAndTransformationsApi~listPropertyTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsPIIType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List property types
     * Lists the Vault property types.  See Data types for more information.  The role that performs this operation must have the `CapSchemaReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/DataTypesAndTransformationsApi~listPropertyTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsPIIType>}
     */
    listPropertyTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsPIIType];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransformations operation.
     * @callback module:api/DataTypesAndTransformationsApi~listTransformationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsTransformation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transformations
     * Lists the transformations in a collection. See Manage transformations for more information.  The role that performs this operation must have the `CapSchemaReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/DataTypesAndTransformationsApi~listTransformationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsTransformation>}
     */
    listTransformations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsTransformation];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/transformations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
