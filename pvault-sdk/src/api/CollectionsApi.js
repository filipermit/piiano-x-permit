/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsCollection from '../model/ModelsCollection';
import RestHTTPError from '../model/RestHTTPError';

/**
* Collections service.
* @module api/CollectionsApi
* @version 1.0
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCollection operation.
     * @callback module:api/CollectionsApi~addCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add collection
     * Adds a collection.  The collection request can be provided in JSON or PVSchema format by setting the `Content-Type` header to `application/json` or `application/pvschema`, respectively. The collection can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  Invalid optional `properties` attributes in a JSON request are ignored.  The role performing this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:model/ModelsCollection} modelsCollection Details of the collection including its properties.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format The format of the response. Overrides any `Accept` header value provided. (default to 'json')
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `show_builtins` – show built-in properties in the response. 
     * @param {module:api/CollectionsApi~addCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCollection}
     */
    addCollection(modelsCollection, opts, callback) {
      opts = opts || {};
      let postBody = modelsCollection;
      // verify the required parameter 'modelsCollection' is set
      if (modelsCollection === undefined || modelsCollection === null) {
        throw new Error("Missing the required parameter 'modelsCollection' when calling addCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'application/pvschema'];
      let accepts = ['application/json', 'application/pvschema'];
      let returnType = ModelsCollection;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/CollectionsApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection
     * Deletes a collection.  The role that performs this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {String} collection The name of the collection.
     * @param {module:api/CollectionsApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollection(collection, callback) {
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollections operation.
     * @callback module:api/CollectionsApi~getAllCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsCollection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collections
     * Lists all collections.  The collections can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The PVSchema format for multiple collections is the PVSchema for each collection string concatenated with a newline.  The role that performs this operation must have the `CapCollectionsReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format The format of the response. Overrides any `Accept` header value provided. (default to 'json')
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `show_builtins` – show built-in properties in the response. 
     * @param {module:api/CollectionsApi~getAllCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsCollection>}
     */
    getAllCollections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pvschema'];
      let returnType = [ModelsCollection];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollection operation.
     * @callback module:api/CollectionsApi~getCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection
     * Gets a collection and its properties.  The collection details can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The role that performs this operation must have the `CapCollectionsReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
     * @param {String} collection The name of the collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format The format of the response. Overrides any `Accept` header value provided. (default to 'json')
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `show_builtins` – show built-in properties in the response. 
     * @param {module:api/CollectionsApi~getCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCollection}
     */
    getCollection(collection, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling getCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'format': opts['format'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pvschema'];
      let returnType = ModelsCollection;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollection operation.
     * @callback module:api/CollectionsApi~updateCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collection
     * Adds properties to a collection.  The collection request can be provided in JSON or PVSchema format by setting the `Content-Type` header to `application/json` or `application/pvschema`, respectively. The collection can be returned in JSON or PVSchema format using the `format` query parameter or by setting  the  `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The collection name provided in the path parameter must match the collection name in the JSON or PVSchema.  The role that performs this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
     * @param {String} collection The name of the collection.
     * @param {module:model/ModelsCollection} modelsCollection Details of the collection, including its properties.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format The format of the response. Overrides any `Accept` header value provided. (default to 'json')
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `show_builtins` – show built-in properties in the response. 
     * @param {module:api/CollectionsApi~updateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCollection}
     */
    updateCollection(collection, modelsCollection, opts, callback) {
      opts = opts || {};
      let postBody = modelsCollection;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling updateCollection");
      }
      // verify the required parameter 'modelsCollection' is set
      if (modelsCollection === undefined || modelsCollection === null) {
        throw new Error("Missing the required parameter 'modelsCollection' when calling updateCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'format': opts['format'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'application/pvschema'];
      let accepts = ['application/json', 'application/pvschema'];
      let returnType = ModelsCollection;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
