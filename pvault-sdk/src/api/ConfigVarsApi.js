/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsConfVar from '../model/ModelsConfVar';
import ModelsConfVarValue from '../model/ModelsConfVarValue';
import RestHTTPError from '../model/RestHTTPError';

/**
* ConfigVars service.
* @module api/ConfigVarsApi
* @version 1.0
*/
export default class ConfigVarsApi {

    /**
    * Constructs a new ConfigVarsApi. 
    * @alias module:api/ConfigVarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearAllConfVars operation.
     * @callback module:api/ConfigVarsApi~clearAllConfVarsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear configuration variables
     * Clears all dynamic configuration variables.  The role performing this operation must have the `CapConfvarWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/ConfigVarsApi~clearAllConfVarsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearAllConfVars(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/confvar', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfVar operation.
     * @callback module:api/ConfigVarsApi~getConfVarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsConfVar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration variable
     * Gets a dynamic configuration variable by name. The names of the variables that may be obtained are:  - `log_level`  The role that performs this operation must have the `CapConfvarReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {String} name The name of the configuration variable.
     * @param {module:api/ConfigVarsApi~getConfVarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsConfVar}
     */
    getConfVar(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getConfVar");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsConfVar;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/confvar/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setConfVar operation.
     * @callback module:api/ConfigVarsApi~setConfVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set configuration variable
     * Sets a dynamic configuration variable by name. The names of the variables that may be set are:  - `log_level` which can take the values of `debug`, `info`, `warn`, and `error`.  The role that performs this operation must have the `CapConfvarWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {String} name The name of the configuration variable.
     * @param {module:model/ModelsConfVarValue} modelsConfVarValue Value of the configuration.
     * @param {module:api/ConfigVarsApi~setConfVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setConfVar(name, modelsConfVarValue, callback) {
      let postBody = modelsConfVarValue;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling setConfVar");
      }
      // verify the required parameter 'modelsConfVarValue' is set
      if (modelsConfVarValue === undefined || modelsConfVarValue === null) {
        throw new Error("Missing the required parameter 'modelsConfVarValue' when calling setConfVar");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/confvar/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
