/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsDetokenizedToken from '../model/ModelsDetokenizedToken';
import ModelsQueryToken from '../model/ModelsQueryToken';
import ModelsTokenMetadata from '../model/ModelsTokenMetadata';
import ModelsTokenValue from '../model/ModelsTokenValue';
import ModelsTokenizeRequest from '../model/ModelsTokenizeRequest';
import ModelsUpdateTokenRequest from '../model/ModelsUpdateTokenRequest';
import RestHTTPError from '../model/RestHTTPError';

/**
* Tokens service.
* @module api/TokensApi
* @version 1.0
*/
export default class TokensApi {

    /**
    * Constructs a new TokensApi. 
    * @alias module:api/TokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTokens operation.
     * @callback module:api/TokensApi~deleteTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tokens
     * Deletes tokens.  The tokens to delete are those that match all the criteria in the `token_id`, `object_id`,  and `tag` parameters. If the token query finds no matches, the operation returns a 404 error. See [search tokens](search-tokens) for more details.  Deleted tokens remain available to the [detokenize](detokenize), [update](update-tokens), and [search](search-tokens) operations, by using the ` delete ` option, until they are hard deleted with this operation or [purged](garbage-collection).  The role performing this operation must have both of these: - The `CapTokensWriter` capability. - At least one allowing policy and no denying policies for the `delete` operation for the `tokens` resource of the specified collection.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data. 
     * @param {String} collection The name of the collection containing the objects.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.objectId Comma-separated list of object IDs.
     * @param {Array.<String>} opts.tag Comma-separated list of tags.
     * @param {Array.<String>} opts.tokenId Comma-separated list of token IDs.
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `hard_delete` – permanently delete the tokens. - `deleted` – remove only deleted tokens, requires `hard_delete` to be specified. 
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~deleteTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTokens(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteTokens");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling deleteTokens");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'object_id': this.apiClient.buildCollectionParam(opts['objectId'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'token_id': this.apiClient.buildCollectionParam(opts['tokenId'], 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/tokens', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detokenize operation.
     * @callback module:api/TokensApi~detokenizeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsDetokenizedToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detokenize tokens
     * Returns the object property values for tokens.  The tokens to detokenize are those matching all the criteria in the `token_id`, `object_id`,  and `tag` parameters. If the token query includes an invalid or not found token ID, the operation returns a 404 error. Otherwise, the operation returns an empty response if it finds no matches. See [search tokens](search-tokens) for more details.  The role performing this operation must have all of these: - The `CapTokensDetokenizer` capability. - Policies:   + At least one allowing policy and no denying policies for the `detokenize` operation for each of the collection properties that are tokenized by tokens specified in the query.   + At least one allowing policy and no denying policies for the `read` operation for each of the collection properties that are tokenized by tokens specified in the query.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data. 
     * @param {String} collection The name of the collection containing the objects.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.objectId Comma-separated list of object IDs.
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `include_metadata` - show token metadata in the response. - `deleted` – detokenize deleted tokens. 
     * @param {Array.<String>} opts.tag Comma-separated list of tags.
     * @param {Array.<String>} opts.tokenId Comma-separated list of token IDs.
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~detokenizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsDetokenizedToken>}
     */
    detokenize(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling detokenize");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling detokenize");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'object_id': this.apiClient.buildCollectionParam(opts['objectId'], 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'token_id': this.apiClient.buildCollectionParam(opts['tokenId'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsDetokenizedToken];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateTokens operation.
     * @callback module:api/TokensApi~rotateTokensCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate tokens
     * Generates new token IDs for a list of tokens.  The role performing this operation must have both of these: - The `CapTokensWriter` capability. - At least one allowing policy and no denying policies for the `write` operation for the `tokens` resource of the specified collection.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data. 
     * @param {Array.<String>} tokenId Comma-separated list of token IDs.
     * @param {String} collection The name of the collection containing the objects.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~rotateTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    rotateTokens(tokenId, collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling rotateTokens");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling rotateTokens");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling rotateTokens");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'token_id': this.apiClient.buildCollectionParam(tokenId, 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/rotate/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTokens operation.
     * @callback module:api/TokensApi~searchTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsTokenMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search tokens
     * Lists tokens with their metadata.   If the token query includes an invalid or not found token ID, the operation returns a 404 error. Otherwise, if no matches are found, the operation returns an empty response.   The role performing this operation must have all of these: - The `CapTokensReader` capability. - At least one allowing policy and no denying policies for the `read` operation for the `tokens` resource of the specified collection.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.  ## Token query  The tokens returned by this operation are defined using 3 query parameters. All parameters are optional, but at least one must be provided:  1. `token_id` - A list of token IDs. The operation will fail if any of the tokens don't exist, are soft deleted, or are expired. 2. `object_id` - A list of object IDs. 3. `tag` - A list of tags.  The returned tokens are those that match all of the criteria.   Examples:  * If only the `tag` parameter is specified, then the result is the tokens with the specified tags.  * If only `token_id` is specified, then the result is the tokens with the requested token IDs. Because token IDs can be reused, multiple tokens can match even if only one token ID is specified.  * If `token_id` and `object_id` are specified, then the result is the tokens with the requested token IDs that have tokenized values for the specified object IDs.
     * @param {String} collection The name of the collection containing the objects.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsQueryToken} modelsQueryToken The token query.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `deleted` – get only deleted tokens. 
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~searchTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsTokenMetadata>}
     */
    searchTokens(collection, reason, modelsQueryToken, opts, callback) {
      opts = opts || {};
      let postBody = modelsQueryToken;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling searchTokens");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling searchTokens");
      }
      // verify the required parameter 'modelsQueryToken' is set
      if (modelsQueryToken === undefined || modelsQueryToken === null) {
        throw new Error("Missing the required parameter 'modelsQueryToken' when calling searchTokens");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ModelsTokenMetadata];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/query/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenize operation.
     * @callback module:api/TokensApi~tokenizeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsTokenValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokenize
     * Creates tokens that reference the values of objects' properties. The token ID is partially or wholly randomly-generated and, therefore, is not sensitive.  The returned token IDs are in the same order as the object IDs in the request. No tokens are created if any object IDs are invalid or not found.  If this operation is called for an object ID and properties that have a token: - Any token tags are appended to the existing token. - If time to live (TTL) is specified, then the token expiry is updated. If TTL is not specified, the token expiry is updated if the default settings result in an expiry date after the token's current expiry date.  The role performing this operation must have both of these: - The `CapTokensWriter` capability. - At least one allowing policy and no denying policies for the `tokenize` operation for each of the collection properties specified in the call.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data. 
     * @param {String} collection The name of the collection containing the objects.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsTokenizeRequest} modelsTokenizeRequest Details of the tokenization request.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ttl Token time to live (TTL) in seconds. If not set, the default TTL is used. See the `PVAULT_TTL_TOKENS` time to live environment variable.
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~tokenizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsTokenValue>}
     */
    tokenize(collection, reason, modelsTokenizeRequest, opts, callback) {
      opts = opts || {};
      let postBody = modelsTokenizeRequest;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling tokenize");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling tokenize");
      }
      // verify the required parameter 'modelsTokenizeRequest' is set
      if (modelsTokenizeRequest === undefined || modelsTokenizeRequest === null) {
        throw new Error("Missing the required parameter 'modelsTokenizeRequest' when calling tokenize");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'ttl': opts['ttl'],
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ModelsTokenValue];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTokens operation.
     * @callback module:api/TokensApi~updateTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tokens
     * Updates `tags` and `expiration` token metadata.  The tokens to update are those that match all the criteria in the `token_id`, `object_id`,  and `tag` parameters. If the token query finds no matches, the operation returns a 404 error. See [search tokens](search-tokens) for more details.  The role performing this operation must have both of these: - The `CapTokensWriter` capability. - At least one allowing policy and no denying policies for the `write` operation for the `tokens` resource of the collection specified in the call.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data. 
     * @param {String} collection The name of the collection containing the objects.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsUpdateTokenRequest} modelsUpdateTokenRequest Update token request details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ttl Time to live (TTL) in seconds for the tokens. If not set, the expiry dates of the tokens are not changed.
     * @param {Array.<String>} opts.objectId Comma-separated list of object IDs.
     * @param {Array.<String>} opts.tag Comma-separated list of tags.
     * @param {Array.<String>} opts.tokenId Comma-separated list of token IDs.
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `deleted` – update only deleted tokens. 
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~updateTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTokens(collection, reason, modelsUpdateTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = modelsUpdateTokenRequest;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling updateTokens");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling updateTokens");
      }
      // verify the required parameter 'modelsUpdateTokenRequest' is set
      if (modelsUpdateTokenRequest === undefined || modelsUpdateTokenRequest === null) {
        throw new Error("Missing the required parameter 'modelsUpdateTokenRequest' when calling updateTokens");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'ttl': opts['ttl'],
        'object_id': this.apiClient.buildCollectionParam(opts['objectId'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'token_id': this.apiClient.buildCollectionParam(opts['tokenId'], 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/tokens', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
