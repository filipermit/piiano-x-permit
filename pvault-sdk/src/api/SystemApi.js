/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigConfig from '../model/ConfigConfig';
import GcDeletionCount from '../model/GcDeletionCount';
import ModelsAllGenerations from '../model/ModelsAllGenerations';
import ModelsHealth from '../model/ModelsHealth';
import ModelsKMSStatus from '../model/ModelsKMSStatus';
import ModelsLicense from '../model/ModelsLicense';
import ModelsProductVersion from '../model/ModelsProductVersion';
import RestHTTPError from '../model/RestHTTPError';

/**
* System service.
* @module api/SystemApi
* @version 1.0
*/
export default class SystemApi {

    /**
    * Constructs a new SystemApi. 
    * @alias module:api/SystemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the controlHealth operation.
     * @callback module:api/SystemApi~controlHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get control service status
     * Gets the status of the service.  The status codes returned follow the IETF standard [Health Check Response Format for HTTP APIs](https://datatracker.ietf.org/doc/html/draft-inadarei-api-health-check-05). For example, `pass` is returned when the service is up.
     * @param {module:api/SystemApi~controlHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsHealth}
     */
    controlHealth(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsHealth;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/info/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataHealth operation.
     * @callback module:api/SystemApi~dataHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data service status
     * Gets the status of the service.  The status codes returned follow the IETF standard [Health Check Response Format for HTTP APIs](https://datatracker.ietf.org/doc/html/draft-inadarei-api-health-check-05). For example, `pass` is returned when the service is up.  The role performing this operation must have the `CapDataReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/SystemApi~dataHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsHealth}
     */
    dataHealth(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsHealth;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/info/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the garbageCollection operation.
     * @callback module:api/SystemApi~garbageCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GcDeletionCount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purge objects and tokens
     * Permanently deletes objects and tokens that have: - passed their time to live (TTL) end date and therefore expired - been deleted where the expiry or deletion date of an item is before the grace period.  For example, suppose the default 30-day grace period applies, and this operation is called on 1 October. In that case, items that expired or were deleted before 1 September are permanently deleted, and those that expired or were deleted after 1 September are unaffected.  The grace period is set with the `PVAULT_DB_GC_GRACE_PERIOD_DAYS` environment variable.  A dry run can be performed to determine how many objects and tokens are available to delete permanently. 
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.filter Whether to delete objects, tokens, or both. Options are: - `objects_only` – delete only objects. - `tokens_only` – delete only tokens. If not set, the default is both. 
     * @param {Boolean} opts.dryRun Whether to respond with how many objects and tokens are available for permanent deletion without permanently deleting them. (default to false)
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/SystemApi~garbageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GcDeletionCount>}
     */
    garbageCollection(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling garbageCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'dry_run': opts['dryRun'],
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GcDeletionCount];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/admin/lifecycle/gc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterInfo operation.
     * @callback module:api/SystemApi~getClusterInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAllGenerations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster information
     * Get Cluster Information.  Returns the vault's generation and the generations of all the workers (data servers).  The role that performs this operation must have the `CapClusterInfoReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/SystemApi~getClusterInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAllGenerations}
     */
    getClusterInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsAllGenerations;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/info/cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguration operation.
     * @callback module:api/SystemApi~getConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get system configuration
     * Get the current active system configuration.  The role that performs this operation must have the `CapInfoReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/SystemApi~getConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigConfig}
     */
    getConfiguration(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/toml', 'application/json'];
      let returnType = ConfigConfig;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/info/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKms operation.
     * @callback module:api/SystemApi~getKmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsKMSStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get KMS status
     * Gets the status of the configured KMS.  The role that performs this operation must have the `CapKMSReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/SystemApi~getKmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsKMSStatus}
     */
    getKms(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsKMSStatus;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/info/kms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicense operation.
     * @callback module:api/SystemApi~getLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsLicense} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get license
     * Gets information on the currently used license.  The role that performs this operation must have the `CapInfoReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/SystemApi~getLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsLicense}
     */
    getLicense(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsLicense;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/info/license', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVaultVersion operation.
     * @callback module:api/SystemApi~getVaultVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsProductVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Vault version
     * Gets the version of Vault.
     * @param {module:api/SystemApi~getVaultVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsProductVersion}
     */
    getVaultVersion(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsProductVersion;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/info/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateKeys operation.
     * @callback module:api/SystemApi~rotateKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate data encryption keys
     * Rotates all the KMS keys that Vault uses to encrypt properties, tokens, and more.  When the keys are rotated, new data is encrypted with the new key. All old keys are retained, so that content encrypted with previous keys can be decipherable.  The role that performs this operation must have the `CapKMSWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/SystemApi~rotateKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rotateKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/admin/keys/rotate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerError operation.
     * @callback module:api/SystemApi~triggerErrorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger an artificial error
     * Manually trigger an artificial error for testing purposes.  The role that performs this operation must have the `CapErrorWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/SystemApi~triggerErrorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triggerError(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/debug/error/trigger', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
