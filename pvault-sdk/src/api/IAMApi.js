/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthConfig from '../model/AuthConfig';
import ModelsAPIKey from '../model/ModelsAPIKey';
import ModelsUserName from '../model/ModelsUserName';
import RestHTTPError from '../model/RestHTTPError';

/**
* IAM service.
* @module api/IAMApi
* @version 1.0
*/
export default class IAMApi {

    /**
    * Constructs a new IAMApi. 
    * @alias module:api/IAMApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getIamConf operation.
     * @callback module:api/IAMApi~getIamConfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IAM configuration
     * Gets the identity and access management (IAM) configuration in TOML format.  The role that performs this operation must have the `CapIAMReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:api/IAMApi~getIamConfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthConfig}
     */
    getIamConf(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/toml', 'application/json'];
      let returnType = AuthConfig;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/iam/conf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateUserApiKey operation.
     * @callback module:api/IAMApi~regenerateUserApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAPIKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate user API key
     * Regenerates a user's API key. The existing API key is invalidated. This operation is irreversible.  The role that performs this operation must have the `CapIAMWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:model/ModelsUserName} modelsUserName The name of the user to regenerate API key for.
     * @param {module:api/IAMApi~regenerateUserApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAPIKey}
     */
    regenerateUserApiKey(modelsUserName, callback) {
      let postBody = modelsUserName;
      // verify the required parameter 'modelsUserName' is set
      if (modelsUserName === undefined || modelsUserName === null) {
        throw new Error("Missing the required parameter 'modelsUserName' when calling regenerateUserApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsAPIKey;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/iam/user/regen', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setIamConf operation.
     * @callback module:api/IAMApi~setIamConfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set IAM configuration
     * Sets the identity and access management (IAM) configuration.  The role that performs this operation must have the `CapIAMWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
     * @param {module:model/AuthConfig} authConfig IAM configuration in TOML format.
     * @param {module:api/IAMApi~setIamConfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setIamConf(authConfig, callback) {
      let postBody = authConfig;
      // verify the required parameter 'authConfig' is set
      if (authConfig === undefined || authConfig === null) {
        throw new Error("Missing the required parameter 'authConfig' when calling setIamConf");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/toml'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/iam/conf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
