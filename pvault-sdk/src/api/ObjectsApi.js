/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsObject from '../model/ModelsObject';
import ModelsObjectFieldsPage from '../model/ModelsObjectFieldsPage';
import ModelsObjectID from '../model/ModelsObjectID';
import ModelsQuery from '../model/ModelsQuery';
import RestHTTPError from '../model/RestHTTPError';

/**
* Objects service.
* @module api/ObjectsApi
* @version 1.0
*/
export default class ObjectsApi {

    /**
    * Constructs a new ObjectsApi. 
    * @alias module:api/ObjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addObject operation.
     * @callback module:api/ObjectsApi~addObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsObjectID} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add object
     * Adds an object to a collection. The request must include all the non-nullable properties, as defined by the [collection schema](/api/operations/list-collection-properties).  The role performing this operation must have both of the following: - The `CapDataWriter` capability. - At least one allowing policy and no denying policies for the `write` operation for each of the collection properties   provided in the call.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.
     * @param {String} collection The name of the collection to add the object to.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object.<String, {String: Object}>} requestBody The object details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {String} opts.ttl Object time to live (TTL) in seconds, cannot be set to 0. If not set, the default TTL is used. See the `PVAULT_TTL_ASSOCIATED_OBJECTS` and `PVAULT_TTL_UNASSOCIATED_OBJECTS` time to live environment variables.
     * @param {module:api/ObjectsApi~addObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsObjectID}
     */
    addObject(collection, reason, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling addObject");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling addObject");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling addObject");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache'],
        'ttl': opts['ttl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsObjectID;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/objects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteObjectById operation.
     * @callback module:api/ObjectsApi~deleteObjectByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete object
     * Deletes an object from a collection. This operation is irreversible.  The role performing this operation must have both of the following: - The `CapDataWriter` capability. - At least one allowing policy and no denying policies for the `delete` operation for each of the properties defined for   the collection specified in the call.    See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.
     * @param {String} collection The name of the collection containing the object.
     * @param {Array.<String>} id The ID of the object.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `hard_delete` – permanently delete the objects. - `deleted` – remove only deleted objects, requires `hard_delete` to be specified. 
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/ObjectsApi~deleteObjectByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteObjectById(collection, id, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteObjectById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteObjectById");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling deleteObjectById");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/objects', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjects operation.
     * @callback module:api/ObjectsApi~getObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsObjectFieldsPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List objects
     * Returns a [paginated list](/api/api-pagination) of objects from a collection with all or a subset of object property values.  The role performing this operation must have both of the following: - The `CapDataReader` capability. - At least one allowing policy and no denying policies for the `read` operation for each of the properties and the   collection requested in the call.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.  **Warning**: Use of the `unsafe` option, to include all object property values, may expose more private information than is required, use with caution.
     * @param {String} collection The name of the collection containing the objects.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {Number} opts.pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`
     * @param {String} opts.cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the `id` is specified, paging is not supported. In this case, if the number of `id` values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST).
     * @param {Array.<String>} opts.id A comma-separated list of object IDs. If not provided, all objects are returned. The number of IDs provided cannot exceed the default page size.
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `unsafe` – fetch all the properties, cannot be specified with `props`. - `show_builtins` – show built-in properties, can only be specified with `unsafe`. - `deleted` – get only deleted objects. 
     * @param {Array.<String>} opts.props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, `props=first_name,last_name`. If the `unsafe` option is used, must be empty.
     * @param {module:api/ObjectsApi~getObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsObjectFieldsPage}
     */
    getObjects(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling getObjects");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getObjects");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache'],
        'page_size': opts['pageSize'],
        'cursor': opts['cursor'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'props': this.apiClient.buildCollectionParam(opts['props'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsObjectFieldsPage;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectsProperty operation.
     * @callback module:api/ObjectsApi~getObjectsPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsObjectFieldsPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get objects property
     * Returns a [paginated list](/api/api-pagination) of the values of a property for objects in a collection.  The role performing this operation must have both of the following: - The `CapDataReader` capability. - At least one allowing policy and no denying policies for the `read` operation for the property and the and the   collection requested in the call.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {String} collection The name of the collection containing the objects.
     * @param {String} property The required property.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {Number} opts.pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`
     * @param {String} opts.cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the `id` is specified, paging is not supported. In this case, if the number of `id` values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST).
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `deleted` – get only deleted objects. 
     * @param {Array.<String>} opts.id The ID of the object. If not given - return all objects
     * @param {module:api/ObjectsApi~getObjectsPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsObjectFieldsPage}
     */
    getObjectsProperty(reason, collection, property, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getObjectsProperty");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling getObjectsProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling getObjectsProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache'],
        'page_size': opts['pageSize'],
        'cursor': opts['cursor'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsObjectFieldsPage;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/properties/{property}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchObjects operation.
     * @callback module:api/ObjectsApi~searchObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsObjectFieldsPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search objects
     * Returns a [paginated list](/api/api-pagination) of objects, with property values, from a collection that satisfies a query.  The role performing this operation must have all the following: - The `CapDataSearcher` capability. - Policies:   + At least one allowing policy and no denying policies for the `read` operation for each of the collection properties     specified in the `props` query parameter.   + At least one allowing policy and no denying policies for the `search` operation for each of the collection     properties     specified in the `query` body parameter.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.  **Warning**: Use of the `unsafe` option, to include all object property values, may expose more private information than is required, use with caution..
     * @param {String} collection The name of the collection containing the objects.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsQuery} modelsQuery The query. This is a JSON object consisting of property keys and match values. For example: ```json {   \"match\": {     \"first_name\": \"John\",     \"last_name\": \"Doe\"   } } ``` is the equivalent to: ```sql where first_name = \"John\" AND last_name=\"Doe\" ``` 
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {Number} opts.pageSize The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`
     * @param {String} opts.cursor The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the `id` is specified, paging is not supported. In this case, if the number of `id` values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST).
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `unsafe` – fetch all the properties, cannot be specified with `props`. - `show_builtins` – show built-in properties, can only be specified with `unsafe`. - `deleted` – get only deleted objects. 
     * @param {Array.<String>} opts.props The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, `props=first_name,last_name`. If the `unsafe` option is used, must be empty.
     * @param {module:api/ObjectsApi~searchObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsObjectFieldsPage}
     */
    searchObjects(collection, reason, modelsQuery, opts, callback) {
      opts = opts || {};
      let postBody = modelsQuery;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling searchObjects");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling searchObjects");
      }
      // verify the required parameter 'modelsQuery' is set
      if (modelsQuery === undefined || modelsQuery === null) {
        throw new Error("Missing the required parameter 'modelsQuery' when calling searchObjects");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache'],
        'page_size': opts['pageSize'],
        'cursor': opts['cursor'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'props': this.apiClient.buildCollectionParam(opts['props'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsObjectFieldsPage;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/query/objects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateObjectById operation.
     * @callback module:api/ObjectsApi~updateObjectByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update object
     * Updates properties of an object in a collection.  The role performing this operation must have both of the following: - The `CapDataWriter` capability. - At least one allowing policy and no denying policies for the `write` operation for each of the collection properties   specified in the call.  See [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data. 
     * @param {String} collection The name of the collection containing the object.
     * @param {Array.<String>} id The ID of the object.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object.<String, {String: Object}>} requestBody The object properties to update.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {String} opts.ttl Object time to live (TTL) in seconds. If not set, the default TTL is used. See the `PVAULT_TTL_ASSOCIATED_OBJECTS` and `PVAULT_TTL_UNASSOCIATED_OBJECTS` time to live environment variables.
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `deleted` – update only deleted objects. 
     * @param {module:api/ObjectsApi~updateObjectByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateObjectById(collection, id, reason, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling updateObjectById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateObjectById");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling updateObjectById");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateObjectById");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache'],
        'ttl': opts['ttl'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/objects', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
