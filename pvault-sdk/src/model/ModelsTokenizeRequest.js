/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModelsTokenizeRequest model module.
 * @module model/ModelsTokenizeRequest
 * @version 1.0
 */
class ModelsTokenizeRequest {
    /**
     * Constructs a new <code>ModelsTokenizeRequest</code>.
     * @alias module:model/ModelsTokenizeRequest
     * @param objectIds {Array.<String>} A list of object IDs to create tokens for.
     * @param props {Array.<String>} A list of the properties to tokenize.
     * @param type {module:model/ModelsTokenizeRequest.TypeEnum} The type of tokens to create: - `VALUE` for tokens that represent the property values as they were when the token was created. - `POINTER` for tokens that represent the property values as they are when the request to detokenize is made. 
     */
    constructor(objectIds, props, type) { 
        
        ModelsTokenizeRequest.initialize(this, objectIds, props, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectIds, props, type) { 
        obj['object_ids'] = objectIds;
        obj['props'] = props;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ModelsTokenizeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelsTokenizeRequest} obj Optional instance to populate.
     * @return {module:model/ModelsTokenizeRequest} The populated <code>ModelsTokenizeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelsTokenizeRequest();

            if (data.hasOwnProperty('fpprops')) {
                obj['fpprops'] = ApiClient.convertToType(data['fpprops'], ['String']);
            }
            if (data.hasOwnProperty('fptemplate')) {
                obj['fptemplate'] = ApiClient.convertToType(data['fptemplate'], 'String');
            }
            if (data.hasOwnProperty('object_ids')) {
                obj['object_ids'] = ApiClient.convertToType(data['object_ids'], ['String']);
            }
            if (data.hasOwnProperty('props')) {
                obj['props'] = ApiClient.convertToType(data['props'], ['String']);
            }
            if (data.hasOwnProperty('reuse_token_id')) {
                obj['reuse_token_id'] = ApiClient.convertToType(data['reuse_token_id'], 'Boolean');
            }
            if (data.hasOwnProperty('reversible')) {
                obj['reversible'] = ApiClient.convertToType(data['reversible'], 'Boolean');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Properties used by the format preserving template for the ID generation. The templates require these properties: - the `primary_account_number` template requires a property of type `CC_NUMBER`. The token ID is generated from this property by retaining the first six and last four digits and randomizing the remaining digits. 
 * @member {Array.<String>} fpprops
 */
ModelsTokenizeRequest.prototype['fpprops'] = undefined;

/**
 * The template used to format the generated ID. Supports:  - `primary_account_number` that generates an ID that is a valid 16-digit PAN (credit card number). If empty, the format of the ID is a UUID. 
 * @member {module:model/ModelsTokenizeRequest.FptemplateEnum} fptemplate
 */
ModelsTokenizeRequest.prototype['fptemplate'] = undefined;

/**
 * A list of object IDs to create tokens for.
 * @member {Array.<String>} object_ids
 */
ModelsTokenizeRequest.prototype['object_ids'] = undefined;

/**
 * A list of the properties to tokenize.
 * @member {Array.<String>} props
 */
ModelsTokenizeRequest.prototype['props'] = undefined;

/**
 * Whether to reuse token IDs.  - If the combination of object ID, property values, and scope are not represented in a token whose ID can be reused, creates a new token and indicates that its ID can be reused. - If the combination of object ID, property values, and scope are represented in a token whose ID can be reused, returns the reusable token's ID.  Applies only to `VALUE` tokens. 
 * @member {Boolean} reuse_token_id
 * @default false
 */
ModelsTokenizeRequest.prototype['reuse_token_id'] = false;

/**
 * Whether the tokens can be detokenized.
 * @member {Boolean} reversible
 * @default true
 */
ModelsTokenizeRequest.prototype['reversible'] = true;

/**
 * A classification for the tokens.
 * @member {String} scope
 * @default 'default'
 */
ModelsTokenizeRequest.prototype['scope'] = 'default';

/**
 * Tags to attach to the tokens. Maximum 10.
 * @member {Array.<String>} tags
 */
ModelsTokenizeRequest.prototype['tags'] = undefined;

/**
 * The type of tokens to create: - `VALUE` for tokens that represent the property values as they were when the token was created. - `POINTER` for tokens that represent the property values as they are when the request to detokenize is made. 
 * @member {module:model/ModelsTokenizeRequest.TypeEnum} type
 */
ModelsTokenizeRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>fptemplate</code> property.
 * @enum {String}
 * @readonly
 */
ModelsTokenizeRequest['FptemplateEnum'] = {

    /**
     * value: "primary_account_number"
     * @const
     */
    "primary_account_number": "primary_account_number"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ModelsTokenizeRequest['TypeEnum'] = {

    /**
     * value: "POINTER"
     * @const
     */
    "POINTER": "POINTER",

    /**
     * value: "VALUE"
     * @const
     */
    "VALUE": "VALUE"
};



export default ModelsTokenizeRequest;

