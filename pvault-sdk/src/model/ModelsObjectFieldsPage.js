/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelsPaging from './ModelsPaging';

/**
 * The ModelsObjectFieldsPage model module.
 * @module model/ModelsObjectFieldsPage
 * @version 1.0
 */
class ModelsObjectFieldsPage {
    /**
     * Constructs a new <code>ModelsObjectFieldsPage</code>.
     * @alias module:model/ModelsObjectFieldsPage
     * @param results {Array.<Object.<String, Object>>} The page objects.
     * @param paging {module:model/ModelsPaging} 
     */
    constructor(results, paging) { 
        
        ModelsObjectFieldsPage.initialize(this, results, paging);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, results, paging) { 
        obj['results'] = results;
        obj['paging'] = paging;
    }

    /**
     * Constructs a <code>ModelsObjectFieldsPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelsObjectFieldsPage} obj Optional instance to populate.
     * @return {module:model/ModelsObjectFieldsPage} The populated <code>ModelsObjectFieldsPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelsObjectFieldsPage();

            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [Object]);
            }
            if (data.hasOwnProperty('paging')) {
                obj['paging'] = ModelsPaging.constructFromObject(data['paging']);
            }
        }
        return obj;
    }


}

/**
 * The page objects.
 * @member {Array.<Object.<String, Object>>} results
 */
ModelsObjectFieldsPage.prototype['results'] = undefined;

/**
 * @member {module:model/ModelsPaging} paging
 */
ModelsObjectFieldsPage.prototype['paging'] = undefined;






export default ModelsObjectFieldsPage;

