/**
 * Piiano Vault REST API
 * --- sidebar_position: 1 sidebar_label: Overview slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigService model module.
 * @module model/ConfigService
 * @version 1.0
 */
class ConfigService {
    /**
     * Constructs a new <code>ConfigService</code>.
     * @alias module:model/ConfigService
     * @param adminApiKey {String} 
     * @param adminMayReadData {Boolean} 
     * @param defaultPageSize {Number} 
     * @param forceAccessReason {Boolean} 
     * @param listenAddr {String} 
     * @param maxPageSize {Number} 
     * @param timeoutSeconds {Number} 
     * @param cacheRefreshIntervalSeconds {Number} 
     * @param license {String} 
     */
    constructor(adminApiKey, adminMayReadData, defaultPageSize, forceAccessReason, listenAddr, maxPageSize, timeoutSeconds, cacheRefreshIntervalSeconds, license) { 
        
        ConfigService.initialize(this, adminApiKey, adminMayReadData, defaultPageSize, forceAccessReason, listenAddr, maxPageSize, timeoutSeconds, cacheRefreshIntervalSeconds, license);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, adminApiKey, adminMayReadData, defaultPageSize, forceAccessReason, listenAddr, maxPageSize, timeoutSeconds, cacheRefreshIntervalSeconds, license) { 
        obj['admin_api_key'] = adminApiKey;
        obj['admin_may_read_data'] = adminMayReadData;
        obj['default_page_size'] = defaultPageSize;
        obj['force_access_reason'] = forceAccessReason;
        obj['listen_addr'] = listenAddr;
        obj['max_page_size'] = maxPageSize;
        obj['timeout_seconds'] = timeoutSeconds;
        obj['cache_refresh_interval_seconds'] = cacheRefreshIntervalSeconds;
        obj['license'] = license;
    }

    /**
     * Constructs a <code>ConfigService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigService} obj Optional instance to populate.
     * @return {module:model/ConfigService} The populated <code>ConfigService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigService();

            if (data.hasOwnProperty('admin_api_key')) {
                obj['admin_api_key'] = ApiClient.convertToType(data['admin_api_key'], 'String');
            }
            if (data.hasOwnProperty('admin_may_read_data')) {
                obj['admin_may_read_data'] = ApiClient.convertToType(data['admin_may_read_data'], 'Boolean');
            }
            if (data.hasOwnProperty('default_page_size')) {
                obj['default_page_size'] = ApiClient.convertToType(data['default_page_size'], 'Number');
            }
            if (data.hasOwnProperty('force_access_reason')) {
                obj['force_access_reason'] = ApiClient.convertToType(data['force_access_reason'], 'Boolean');
            }
            if (data.hasOwnProperty('listen_addr')) {
                obj['listen_addr'] = ApiClient.convertToType(data['listen_addr'], 'String');
            }
            if (data.hasOwnProperty('max_page_size')) {
                obj['max_page_size'] = ApiClient.convertToType(data['max_page_size'], 'Number');
            }
            if (data.hasOwnProperty('timeout_seconds')) {
                obj['timeout_seconds'] = ApiClient.convertToType(data['timeout_seconds'], 'Number');
            }
            if (data.hasOwnProperty('cache_refresh_interval_seconds')) {
                obj['cache_refresh_interval_seconds'] = ApiClient.convertToType(data['cache_refresh_interval_seconds'], 'Number');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} admin_api_key
 */
ConfigService.prototype['admin_api_key'] = undefined;

/**
 * @member {Boolean} admin_may_read_data
 */
ConfigService.prototype['admin_may_read_data'] = undefined;

/**
 * @member {Number} default_page_size
 */
ConfigService.prototype['default_page_size'] = undefined;

/**
 * @member {Boolean} force_access_reason
 */
ConfigService.prototype['force_access_reason'] = undefined;

/**
 * @member {String} listen_addr
 */
ConfigService.prototype['listen_addr'] = undefined;

/**
 * @member {Number} max_page_size
 */
ConfigService.prototype['max_page_size'] = undefined;

/**
 * @member {Number} timeout_seconds
 */
ConfigService.prototype['timeout_seconds'] = undefined;

/**
 * @member {Number} cache_refresh_interval_seconds
 */
ConfigService.prototype['cache_refresh_interval_seconds'] = undefined;

/**
 * @member {String} license
 */
ConfigService.prototype['license'] = undefined;






export default ConfigService;

